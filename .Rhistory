devtools::build()
devtools::test()
#' By retruning a list of named functions. This set of functions differs from \code{MEND2013_fluxes} in its
#' represenation of the DOC uptake by microbial biomass. Here this dynamic is driven by reverse michaelis menten kinetics.
#'
#' @param state A numeric vector of the different MEND carbon pool states.
#' @param parms A data frame of the parameters.
#' @return A list of functions that calculate the fluxes between \href{https://doi.org/10.1890/12-0681.1}{Wang et al. 2013} carbon pools.
#' @family 2013 MEND model functions
#' @family carbon flux functions
#' @importFrom assertthat assert_that has_name
#' @noRd
MEND2013_RM_fluxes <- function(state, parms){
# Check inputs
assert_that(has_name(x = state, which = c("B", "D", "P", "Q", "M", "EP", "EM")))
assert_that(data.table::is.data.table(parms))
assert_that(has_name(x = parms, which = c("parameter", "description", "units", "value")))
req <- c('E.c', 'V.d', 'm.r', 'K.d', 'V.p', 'K.p', 'V.m', 'K.m', 'K.ads',
'Q.max', 'K.des', 'p.ep', 'p.em', 'r.ep',  'r.em')
missing <- setdiff(req, parms$parameter)
assert_that(length(missing) == 0, msg = paste('parms missing values for: ', paste0(missing, collapse = ', ')))
# Format the parameters into a vector.
p        <- parms$value
names(p) <- parms$parameter
with(as.list(c(state, p)), {
fxn_list <- list(
"F1" = function(){
# DOC uptake by microbial biomass, note that this uses reverse michaelis menten kinetics.
(1/E.c) * (V.d + m.r) * B * D /(K.d + B)
},
"F2" = function(){
# POC decomposition
V.p * EP * P / (K.p + P)
},
"F3" = function(){
# Break down of mineralized organic carbon
V.m * EM * M / (K.m + M)
},
"F4" = function(){
# Microbial respiration from biomass growth
(1/E.c -1) * V.d * B * D /( K.d + D)
},
"F5" = function(){
# Metabolic/maintenance microbial respiration
(1/E.c -1) * m.r * B * D /( K.d + D)
},
"F6" = function(){
# Adsorption of DOC to mineral-associated organic carbon
K.ads * D *(1- Q/ Q.max)
},
"F7" = function(){
# Desorption of mineral-associated organic carbon to DOC
K.des * Q/Q.max
},
"F8" = function(){
# Carbon loss due to microbial biomass mortality
(1 - p.ep - p.em) * m.r * B
},
"F9.ep" = function(){
# Enzyme production
p.ep * m.r *B
},
"F9.em" = function(){
# Enzyme production
p.em * m.r * B },
"F10.ep" = function(){
# Enzyme turn over
r.ep * EP },
"F10.em" = function(){
# Enzyme turn over
r.em * EM })
return(fxn_list)
})
}
#' \code{MEND2013_RM} Run and solve MEND 2013  \href{https://doi.org/10.1890/12-0681.1}{Wang et al. 2013} that
#' uses reverse michaelis menten kinetics in microbial uptake of DOC.
#'
#' @param parameters data.table containing the following columns: parameter, value, and units. Default values are stored as pacakge see \code{MEND2013_params}.
#' @param time a vector of the time setps.
#' @param inital_state a numeric vector of the different MEND carbon pool states. Default values are probvide as package data see \code{MEND2013_initalState}
#' @return a data frame of MEND output variables
#' @family 2013 MEND model functions
#' @family model
#' @export
MEND2013_RM <- function(parameters, time, inital_state){
out <- solver(params = parameters,
time = time,
state = inital_state,
carbon_pools_func = MEND2013_pools,
carbon_fluxes_func = MEND2013_RM_fluxes)
return(out)
}
state <- MEND2013_initalState
# Test the functions that make up the MEND 2013 system of equations.
test_that("MEND2013_RM_fluxes", {
# Make sure that an error is thrown when the incorrect inputs are  used.
expect_error(MEND2013_RM_fluxes(state = state[1:2], parms = MEND2013_params),
"state does not have all of these name(s): 'B', 'D', 'P', 'Q', 'M', 'EP', 'EM'", fixed = TRUE)
expect_error(MEND2013_RM_fluxes(state = state, parms = MEND2013_params[ ,1:2]),
"parms does not have all of these name(s): 'parameter', 'description', 'units', 'value'", fixed = TRUE)
expect_error(MEND2013_RM_fluxes(state = state, parms = MEND2013_params[1:2,]),
"parms missing values for:  E.c, V.d, m.r, K.d, V.m, K.m, K.ads, Q.max, K.des, p.ep, p.em, r.ep, r.em", fixed = TRUE)
#  MEND2013_fluxes should return a functions that can return numeric values.
x <- MEND2013_RM_fluxes(state = state, parms = MEND2013_params)
expect_true(all(unlist(lapply(x, is.function))))
xx <- x$F1()
expect_true(is.numeric(xx))
})
# Test the functions that make up the MEND 2013 system of equations.
test_that("MEND2013_RM_fluxes", {
# Make sure that an error is thrown when the incorrect inputs are  used.
expect_error(MEND2013_RM_fluxes(state = state[1:2], parms = MEND2013_params),
"state does not have all of these name(s): 'B', 'D', 'P', 'Q', 'M', 'EP', 'EM'", fixed = TRUE)
expect_error(MEND2013_RM_fluxes(state = state, parms = MEND2013_params[ ,1:2]),
"parms does not have all of these name(s): 'parameter', 'description', 'units', 'value'", fixed = TRUE)
expect_error(MEND2013_RM_fluxes(state = state, parms = MEND2013_params[1:2,]),
"parms missing values for:  E.c, V.d, m.r, K.d, V.m, K.m, K.ads, Q.max, K.des, p.ep, p.em, r.ep, r.em", fixed = TRUE)
#  MEND2013_fluxes should return a functions that can return numeric values.
x <- MEND2013_RM_fluxes(state = state, parms = MEND2013_params)
expect_true(all(unlist(lapply(x, is.function))))
xx <- x$F1()
expect_true(is.numeric(xx))
})
devtools::build()
devtools::test()
devtools::build()
devtools::test()
devtools::build()
devtools::test()
devtools::build()
devtools::test()
devools::build()
devtools::build()
devtools::test()
ls()
test_that("assign_parameters:", {
expect_error(assign_parameters(data.frame(x = 'f'), 'data.table::is.data.table(x = dt) is not TRUE'))
expect_error(assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 'n'), 'dt[["value"]] is not a numeric or integer vector'))
x <- assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 11))
expect_true(is.null(x))
# If this function works then there should be an object called g, with the value of 11.
expect_equal(g, 11)
# Make sure that that an error is thrown if missing required parameters
dt <- data.table::data.table('parameter' = 'g', 'value' = 11)
expect_error(assign_parameters(dt, req = 'fake'))
assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 12), req = 'g')
expect_equal(g, 12)
rm(ls())
})
rm("g")
devtools::biuld()
dvtools::build()
devtools::build()
devtools::test()
test_that("assign_parameters:", {
expect_error(assign_parameters(data.frame(x = 'f'), 'data.table::is.data.table(x = dt) is not TRUE'))
expect_error(assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 'n'), 'dt[["value"]] is not a numeric or integer vector'))
x <- assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 11))
expect_true(is.null(x))
# If this function works then there should be an object called g, with the value of 11.
expect_equal(g, 11)
# Make sure that that an error is thrown if missing required parameters
dt <- data.table::data.table('parameter' = 'g', 'value' = 11)
expect_error(assign_parameters(dt, req = 'fake'))
assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 12), req = 'g')
expect_equal(g, 12)
rm('g')
})
test_that("assign_parameters:", {
expect_error(assign_parameters(data.frame(x = 'f'), 'data.table::is.data.table(x = dt) is not TRUE'))
expect_error(assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 'n'), 'dt[["value"]] is not a numeric or integer vector'))
x <- assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 11))
expect_true(is.null(x))
# If this function works then there should be an object called g, with the value of 11.
expect_equal(g, 11)
# Make sure that that an error is thrown if missing required parameters
dt <- data.table::data.table('parameter' = 'g', 'value' = 11)
expect_error(assign_parameters(dt, req = 'fake'))
assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 12), req = 'g')
expect_equal(g, 12)
message(ls())
})
test_that("assign_parameters:", {
expect_error(assign_parameters(data.frame(x = 'f'), 'data.table::is.data.table(x = dt) is not TRUE'))
expect_error(assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 'n'), 'dt[["value"]] is not a numeric or integer vector'))
x <- assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 11))
expect_true(is.null(x))
# If this function works then there should be an object called g, with the value of 11.
expect_equal(g, 11)
# Make sure that that an error is thrown if missing required parameters
dt <- data.table::data.table('parameter' = 'g', 'value' = 11)
expect_error(assign_parameters(dt, req = 'fake'))
assign_parameters(data.table::data.table('parameter' = 'g', 'value' = 12), req = 'g')
expect_equal(g, 12)
rm(list=ls())
})
source('~/Documents/2020/MEMC/tests/testthat/test-helper_functions.R', echo=TRUE)
devtools::build()
devtools::test()
usethis::use_vignette("MEND2103_RM_example", "MEND2013_RM_example")
install.packages("remotes")
library(remotes)
library(remotes)
install_github('Microbial-Explicit-Model/MEMC')
#' \code{MEND2_RM} Run and solve 2 P pool MEND  \href{https://doi.org/10.1890/12-0681.1}{Wang et al. 2013} that
#' uses reverse michaelis menten kinetics in microbial uptake of DOC.
#'
#' @param parameters data.table containing the following columns: parameter, value, and units. Default values are stored as pacakge see \code{MEND_params}.
#' @param time a vector of the time setps.
#' @param inital_state a numeric vector of the different MEND carbon pool states. Default values are probvide as package data see \code{MEND_initalState}
#' @return a data frame of MEND output variables
#' @family MEND2
#' @family model
#' @export
MEND2_RM <- function(parameters, time, inital_state){
out <- solver(params = parameters,
time = time,
state = inital_state,
carbon_pools_func = MEND_pools,
carbon_fluxes_func = MEND2_RM_fluxes)
return(out)
}
devtools::load_all()
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
devtools::load_all()
# Define the time steps to solve the model at.
t <- seq(0, 1e3, by = 0.1)
MEND2_RM$name <- "MEND2_RM"
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
# Solve the 2 model pool
MEND2_RM <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2
devtools::load_all()
# Solve the 2 model pool
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_initalState
#'
#' \code{MEND} Run and solve MEND 2013 \href{https://doi.org/10.1890/12-0681.1}{Wang et al. 2013}.
#'
#' @param parameters data.table containing the following columns: parameter, value, and units. Default values are stored as pacakge see \code{MEND_params}.
#' @param time a vector of the time setps.
#' @param inital_state a numeric vector of the different MEND carbon pool states. Default values are probvide as package data see \code{MEND_initalState}
#' @return a data frame of MEND output variables
#' @family 2013 MEND model functions
#' @family model
#' @export
MEND <- function(parameters, time, inital_state){
out <- solver(params = parameters,
time = time,
state = inital_state,
carbon_pools_func = MEND2_pools(),
carbon_fluxes_func = MEND2_fluxes())
return(out)
}
#' @param state A numeric vector of the different MEND carbon pool states.
#' @param parms A data frame of the parameters.
#' @param flux_function a function that will return a list of functions that modify how carbon moves between
#' the different carbon pools.
#' @return A list of the state variables
#' @importFrom Rdpack reprompt
#' @importFrom assertthat assert_that has_name
#' @family MEND2
#' @family carbon pool functions
#' @noRd
MEND2_pools <- function(t, state, parms, flux_function = MEND2_fluxes){
# Check the inputs
required_states <- c("P1", "P2", "M", "B", "D1", "D2", "Q1", "Q2", "EP1", "EP2", "EM", "IC", "Tot")
missing_states  <- required_states[!required_states %in% names(state)]
assert_that(length(missing_states) == 0, msg = paste0('missing states: ', paste(missing_states, collapse = ',  ')))
assert_that(all(required_states  == names(state)), msg = paste0('state pools must be in the following order: ', paste(required_states, collapse = ',  ')))
assert_that(data.table::is.data.table(parms))
#assert_that(has_name(x = parms, which = c("parameter", "description", "units", "value")))
assert_that(is.function(flux_function))
req <- c('I.p1', 'I.p2', 'g.d', 'f.d', 'I.d1', 'I.d2')
missing <- setdiff(req, parms$parameter)
assert_that(length(missing) == 0, msg = paste('parms missing values for: ', paste0(missing, collapse = ', ')))
# Format the parameters into a vector.
p        <- parms$value
names(p) <- parms$parameter
with(as.list(c(state, p)),{
# Define the fluxes and check to make sure they meet the requirements to be used
# by the MEND carbon pool structure.
fluxes <- flux_function(state = state, parms = parms)
expected_fluxes <- c("F1d1", "F1d2", "F2p1", "F2p2", "F3", "F6d1", "F6d2", "F7d1",
"F7d2", "F8", "F9.ep1", "F9.ep2", "F9.em", "F10.ep1", "F10.ep2", "F10.em" )
assertthat::assert_that(assertthat::has_name(x = fluxes, which = expected_fluxes))
assertthat::assert_that(all(unlist(lapply(fluxes, is.function))), msg = 'fluxes input must be a list of functions')
# Define the system of differental equations to describes the
# changes in the carbon pool states.
# -----------------------------------------------------------
# P = particulate organic carbon (2 pools)
dP1 <- I.p1 + (1 - g.d) * fluxes$F8() - fluxes$F2p1()
dP2 <- I.p2 - fluxes$F2p2()
# M = mineral-associated organic carbon (MOC)
dM <- (1 - f.d) * (fluxes$F2p1() + fluxes$F2p2()) - fluxes$F3()
# Q = active layer of MOC (2 pools)
dQ1 <- fluxes$F6d1() - fluxes$F7d1()
dQ2 <- fluxes$F6d1() - fluxes$F7d1()
# B = microbial biomass carbon
dB <- E.c1*fluxes$F1d1() + E.c2*fluxes$F1d2() -  fluxes$F8() - (fluxes$F9.em() + fluxes$F9.ep1() +  fluxes$F9.ep2())
# D = dissolved organic carbon (2 pools)
dD1 <- I.d1 +  g.d * fluxes$F8() +  fluxes$F3()  + 0.5 * f.d * (fluxes$F2p1() + fluxes$F2p2()) + (fluxes$F10.em() + fluxes$F10.ep1() + + fluxes$F10.ep2()) - fluxes$F1d1() - (fluxes$F6d1() - fluxes$F7d1())
dD2 <- I.d2 +  0.5 * f.d*  (fluxes$F2p2() + fluxes$F2p2()) - fluxes$F1d2() - (fluxes$F6d1() - fluxes$F7d1())
# EP = carbon stored as extracellular enzymes (2 pools)
dEP1 <- fluxes$F9.ep1() - fluxes$F10.ep1()
dEP2 <- fluxes$F9.ep2() - fluxes$F10.ep2()
# EM = carbon stored as extracellular enzymes
dEM <- fluxes$F9.em() - fluxes$F10.em()
# IC = inorganic carbon (CO2)
dIC <-  (1 - E.c1) *  fluxes$F1d1() + (1 - E.c2) *  fluxes$F1d2()
# Tot = the total carbon pool
dTot <- I.p1 + I.p2 + I.d1 + I.d2 - (1 - E.c1)*fluxes$F1d1() - (1 - E.c2)*fluxes$F1d2()
# Return outputs
list(c(dP1, dP2, dM, dB, dD1, dD2, dQ1, dQ2, dEP1, dEP2, dEM, dIC, dTot))
})
}
# Solve the 2 model pool
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
devtools::load_all()
rm(list = c("MEND", "MEND2_pools", "MEND2_RM"))
devtools::load_all()
# Solve the 2 model pool
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2
devtools::load_all()
# Solve the 2 model pool
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_RM$name <- "MEND2_RM"
# Solve the 2 model pool
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2$name <- "MEND2"
MEND <- solver(params = MEND_params, time = t, state = MEND_initalState, carbon_pools_func = MEND_pools, carbon_fluxes_func = MEND_fluxes)
MEND$name <- "MEND"
MEND_RM <- MEND_RM(parameters = MEND_params, time = t, inital_state = MEND_initalState)
MEND_RM$name <- "MEND_RM"
# Doubble pool MEND models -------------------------------------------------------------------------------
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2$name <- "MEND2"
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_RM$name <- "MEND2_RM"
# Doubble pool MEND models -------------------------------------------------------------------------------
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2$name <- "MEND2"
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
devtools::load_all()
rm(list = c("MEND", "MEND2", "MEND2_RM"))
devtools::load_all()
MEND <- solver(params = MEND_params, time = t, state = MEND_initalState, carbon_pools_func = MEND_pools, carbon_fluxes_func = MEND_fluxes)
MEND$name <- "MEND"
MEND_RM <- MEND_RM(parameters = MEND_params, time = t, inital_state = MEND_initalState)
MEND_RM$name <- "MEND_RM"
MEND2 <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2$name <- "MEND2"
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_RM$name <- "MEND2_RM"
MEND2_RM <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_RM
MEND2_RM$name <- "MEND2_RM"
MEND2_RM
MEND2
MEND2
#' \code{MEND2} Run and solve MEND 2013 \href{https://doi.org/10.1890/12-0681.1}{Wang et al. 2013}
#' modified with two different pools.
#'
#' @param parameters data.table containing the following columns: parameter, value, and units. Default values are stored as pacakge see \code{MEND_params}.
#' @param time a vector of the time setps.
#' @param inital_state a numeric vector of the different MEND carbon pool states. Default values are probvide as package data see \code{MEND_initalState}
#' @return a data frame of MEND output variables
#' @family MEND2
#' @family model
#' @export
MEND2 <- function(parameters, time, inital_state){
out <- solver(params = parameters,
time = time,
state = inital_state,
carbon_pools_func = MEND2_pools,
carbon_fluxes_func = MEND2_fluxes)
return(out)
}
MEND2MEND2
MEND2
MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
devtools::load_all()
rm(list = c("MEND", "MEND2", "MEND2_RM"))
devtools::load_all()
# Single pool MEND models -------------------------------------------------------------------------------
# Solve single pool MEND 2013
MEND_out <- solver(params = MEND_params, time = t, state = MEND_initalState, carbon_pools_func = MEND_pools, carbon_fluxes_func = MEND_fluxes)
MEND_out$name <- "MEND"
MEND_RM_out <- MEND_RM(parameters = MEND_params, time = t, inital_state = MEND_initalState)
MEND_RM_out$name <- "MEND_RM"
# Doubble pool MEND models -------------------------------------------------------------------------------
MEND2_out <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_out$name <- "MEND2"
# Doubble pool MEND models -------------------------------------------------------------------------------
MEND2_out <- MEND2(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_out
MEND2_out$name <- "MEND2"
MEND2_RM_out <- MEND2_RM(parameters = MEND2_params, time = t, inital_state = MEND2_initalState)
MEND2_RM_out$name <- "MEND2_RM"
source('~/Documents/2020/MEMC/data-raw/pkg_old-new.R', echo=TRUE)
devtools::load_all()
source('~/Documents/2020/MEMC/data-raw/pkg_old-new.R', echo=TRUE)
install.packages("rmarkdown")
usethis::use_vignette()
usethis::use_vignette(name = "installation", title = "installation")
install.packages(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
